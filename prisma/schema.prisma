// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model Events {
  id             Int        @id @default(autoincrement())
  categoryId     Int
  category       Categories @relation(fields: [categoryId], references: [id])
  organizerId    Int
  organizer      Organizer  @relation(fields: [organizerId], references: [id])
  cityId         Int
  city           City       @relation(fields: [cityId], references: [id])
  locationDetail String
  name           String
  image          String
  description    String     @db.Text
  startEvent     DateTime   @default(now())
  endEvent       DateTime
  slug           String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  seats          Seats[]
  vouchers       Vouchers[]
  reviews        Reviews[]

  @@map("events")
}

model Categories {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Events[]

  @@map("categories")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Events[]

  @@map("cities")
}

model Coupons {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        Users    @relation(fields: [userId], references: [id])
  couponCode  String
  name        String
  isUsed      Boolean  @default(false)
  discount    Int
  isExpired   Boolean  @default(false)
  expiredDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transactions[]

  @@map("coupons")
}

model Payments {
  id              Int          @id @default(autoincrement())
  transactionId   Int
  transaction     Transactions @relation(fields: [transactionId], references: [id])
  paymentMethod   String
  paymentProofUrl String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("payments")
}

model Transactions {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  userId            Int
  voucher_amount    Int?
  voucherId         Int?
  voucher           Vouchers?           @relation(fields: [voucherId], references: [id])
  coupoun_amount    Int?
  couponId          Int?
  coupon            Coupons?            @relation(fields: [couponId], references: [id])
  usedPoint         Int?
  status            TransactionStatus   @default(WAITING_FOR_PAYMENT)
  totalPrice        Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payments[]
  detailTransaction DetailTransaction[]
  points            Points?             @relation(fields: [pointsId], references: [id])
  pointsId          Int?

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model DetailTransaction {
  id              Int          @id @default(autoincrement())
  uuid            String       @unique @default(uuid())
  transactionId   Int
  transaction     Transactions @relation(fields: [transactionId], references: [id])
  seatsId         Int
  seats           Seats        @relation(fields: [seatsId], references: [id])
  quantity        Int
  priceAtPurchase Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  reviews Reviews[]

  @@map("detail_transactions")
}

model Seats {
  id                 Int                 @id @default(autoincrement())
  eventId            Int
  event              Events              @relation(fields: [eventId], references: [id])
  name               String
  description        String              @db.Text
  totalSeat          Int
  reserved           Int                 @default(0)
  price              Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  tickets            Tickets[]
  detailTransactions DetailTransaction[]

  @@map("seats")
}

model NotificationsUser {
  id              Int           @id @default(autoincrement())
  usersId         Int
  user            Users         @relation(fields: [usersId], references: [id])
  notificationsId Int
  notifications   Notifications @relation(fields: [notificationsId], references: [id])
  isRead          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("notifications_user")
}

model Notifications {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  user               Users               @relation(fields: [userId], references: [id])
  message            String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  notificationsUsers NotificationsUser[]

  @@map("notifications")
}

model Referrals {
  id             Int      @id @default(autoincrement())
  refererUserId  Int
  referer        Users    @relation("RefererRel", fields: [refererUserId], references: [id])
  referredUserId Int
  referred       Users    @relation("ReferredRel", fields: [referredUserId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("referrals")
}

model Users {
  id                  Int                 @id @default(autoincrement())
  fullName            String
  email               String              @unique
  password            String
  profilePicture      String?
  phoneNumber         String
  tokenreset          String?
  role                Role                @default(USER)
  referalCode         String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  coupons             Coupons[]
  notifications       Notifications[]
  referralsAsReferer  Referrals[]         @relation("RefererRel")
  referralsAsReferred Referrals[]         @relation("ReferredRel")
  points              Points[]
  reviews             Reviews[]
  tickets             Tickets[]
  organizer           Organizer[]
  notificationsUsers  NotificationsUser[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  ORGANIZER
}

model Vouchers {
  id           Int            @id @default(autoincrement())
  organizerId  Int
  organizer    Organizer      @relation(fields: [organizerId], references: [id])
  voucherCode  String         @unique @default(uuid())
  eventId      Int
  event        Events         @relation(fields: [eventId], references: [id])
  code         String         @unique
  description  String         @db.Text
  claimed      Int            @default(0)
  quota        Int
  value        Int
  validAt      DateTime
  expiredAt    DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  transactions Transactions[]

  @@map("vouchers")
}

model Points {
  id           Int            @id @default(autoincrement())
  userId       Int            @unique
  user         Users          @relation(fields: [userId], references: [id])
  pointsValue  Int
  expiredDate  DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transactions Transactions[]

  @@map("points")
}

model Reviews {
  id                  Int               @id @default(autoincrement())
  eventId             Int
  event               Events            @relation(fields: [eventId], references: [id])
  userId              Int
  user                Users             @relation(fields: [userId], references: [id])
  detailTransactionId Int
  detailTransaction   DetailTransaction @relation(fields: [detailTransactionId], references: [id])
  rating              Int
  comment             String            @db.Text
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("reviews")
}

model Tickets {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       Users     @relation(fields: [userId], references: [id])
  seatId     Int
  seat       Seats     @relation(fields: [seatId], references: [id])
  ticketCode String
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("tickets")
}

model Organizer {
  id             Int        @id @default(autoincrement())
  userId         Int
  user           Users      @relation(fields: [userId], references: [id])
  name           String
  profilePicture String?
  phoneNumber    String
  npwp           String
  accNumber      Int?
  bankName       String?
  isVerified     Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  events         Events[]
  vouchers       Vouchers[]

  @@map("organizers")
}
